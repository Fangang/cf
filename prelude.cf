** Prelude based on Functional False: http://nsl.com/k/f/f/prelude.f **

** Stack Shufflers **
[a-] drop set
[ab-ba] swap set
[a-aa] dup set

** Lists **
[ [[[a A]] a A] )] uncons set
[ [[a b] [a]b,] (] cons set

** Operators **
[] id set
[uncons;'drop;'] first set
[uncons;'[drop;']`] rest set
[|first;'] last set
[\\`] unit set
[unit;'cons;'] pair set
[uncons;'first;'] unpair set
[[drop;']`] dropd set
[[dup;']`] dupd set
[[swap;']`] swapd set
[\`cons;!`] dipd set

** Continuations **
[[[drop;'[]]`]$] clearstack set
[[drop;'[]]$] clearqueue set
[[ab- [][]]$] clear set

[[[|uncons;'|swap;']`swap;'unit;',]$] queue set
[[|uncons;'|[unit;',]`]$] unqueue set

[[[dup;'unit;',]`]$] stack set
[[[last;']`]$] unstack set

** Control Flow **
[pair;'[dupd;']`['not]`nth'] cond set
[unit;!cons;!dup;![uncons;!uncons;!drop;!]`[while;!],,[]cond;!] while set ** [c][t]while **
[unit;![1 -]swap;!,\`,[]swap;!while;!drop;!] do set ** n[f]do **

** Combinators **
[[a-aa count[]abc-cab]` ab-ba
 [[uncons;!]` a-aa abc-cab[cons;!!first;! ab-ba cons;!]dipd;!]
 do;! ab- |] map set ** [..][f]map **

** Examples **
[[1 =][][dup;'1 - fac;'*]cond;'] fac set
