Changes since  5e25d6
=====================
1) Sequences are mutable
   Join will possibly modify any of the sequences passed in

Changes since  7d64b2
=====================
1) Re-enabled the limits code. 
2) Provided the ability to set a time limit on the spawning
   of a thread. After the set time it aborts.

Changes since 522bd3
====================
1) Lots of new things that need to be document. I'll get to this in
   time .
2) foldl and foldr added as primitives.
3) split, sdrop and stake added as primitives.
4) Simple socket support.
5) Simple thread support (non-native, lightweight threads).
6) An irc bot example in cfbot.lcf
7) Interpreters are evaluated using asynchronous event queues
   provided by Boost. This is where we get the lightweight
   threading from.

Changes since d12443
====================
1) The 'nth' primitive is now '@'.
2) The 'printnl' primitive is now 'println'

Changes since a17fce
====================
1) Math operators on sequences works so that the math operator
   is applied per element on the sequence. eg:

     [1 2 3] 2 +       => [3 4 5]
     [1 2 3] [4 5 6] + => [5 7 9]

Changes since 0ab8ac
====================
1) Major primitive word change. unquote '!' is now .
   This change was made to make typing cf code easier without
   needing to use the shift key so often. The '.' is also less
   visually jarring and provides more whitespace between words.
    
   The old '.' is now 'printnl'. I need to think of a better name
   for that.
    
   So old code:
    
    5 fac!
    
   New code:
    
    5 fac.

2) Impovements to list join and uncons operations. Reference
   counts are checked to see if objects can be modified directly
   instead of copied. Appends are done lazily.

Changes since c99128
====================
1) unquote will now get the value of a symbol if it has one and
   automatically apply unquote to that value. So:
    
    [1 2 +] ! => 3
    foo ! => foo
    [1 2 +] foo set foo ! => 3
    
   This reduces the need for a ';' to get the value of a symbol
   before unquoting it. So code like:
    
    dup;!drop;!dip;!
    
   can be
    
    dup!drop!dip
