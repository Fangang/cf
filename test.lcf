Test Suite
==========
Some simple unit tests for cf. Mostly based on the examples given for
Functional False at:

http://nsl.com/k/f/f.htm

Many of these will fail due to cf using different primitives,
etc. These will be fixed over time, either by correcting the test for
the different primitive, or implementing new primitives.

Run with:

$ ./cf prelude.cf test.lcf

Code
====

First we need some words for doing simple unit tests. The 'test' word
only prints the failed tests.

> [ 
>   [[c]stack.[[]unstack.c.stack.[[]unstack.]`]`swap.unit.,unstack.] (
> ] infra set
> [ 
>   dup.[infra.=]`swap. [drop.] 
>   [ a- ** write " passed\n" write ** ] 
>   [ write " failed\n" write ] 
>   cond. 
> ] test set

Now the tests themselves:

> [123]      [123]               test.
> [123.45]   [123.45]            test.
> [name]     [name]              test.
> []         [["abcd"] abcd set] test.
> [["abcd"]] [abcd;]             test.
> ["abcd"]   [abcd.]            test.

> [1 2] [2 1 ab-ba] test.
> [3] [1 2 +] test.
> [1] [3 2 -] test.
> [12] [3 4 *] test.
> [2] [4 2 %] test.
> [8] [2 3 ^] test.
> [3] [3.2 _] test.

> [1] [2 2 =] test.
> [0] [4 6 >] test.
> [3] [4 3 &] test.

> [1] [[1 2] [1 2] ~] test.

> [[3]] [[1 2 3] #] test.

> [[3 2 1]] [[1 2 3]|] test.

> [[1 2]] [[2 [1 2 3]] /] test.
> [[[1 2][3 1][2 3]]] [[3 2][1 2 3] /] test.

> [[3]] [2[1 2 3] \] test.
> [[[1 2][3]]] [[0 2][1 2 3] \] test.
> [[3 4 1 2]] [[1 2 3 4] 2 \] test.

> [1] [[10 20 30] 20 ?] test.

.> [[10 20 30]] [[10 20 10 10 30] ;] test.

> [[[0 2 3][1][4]]] [[10 20 10 10 30] :] test.

.> [[0 1 2]] [3 <] test.
.> [[0 2 1]] [[10 30 20] <] test.

.> [1 2 [5] 3 4] [1 2 [[2 3 +]] . 3 4] test.
.> [[2 1]] [[[1 2 3][[1 0]]] .] test.
.> [[-1 -2 3] [[[1 2 3][[1 0]][-1*]] .] test.
.> [[9 5 3]] [[[1 2 3][[1 0]]+[3 8]] .] test.

> [5] [2 [3 +] .] test.
> [5 4] [2 3 4 [+]`] test.
> [[+]] ['+] test.

> [[1 2 3]] [[1][2 3] ,] test.

.> [4 5 6 1 2 3] [1 2 3 '\ $ 4 5 6 ] test.

Test the new unquote semantics introduced by commit id 82b61f

> [3] [[1 2 +].] test.
> [foo] [foo.] test.
> [3] [[1 2 +] foo set foo. ] test.

Test enum primitive

> [[0 1 2 3 4]] [5 enum] test.

Math Double Dispatch

> [4] [3 1 +] test.
> [2] [3 1 -] test.
> [6] [3 2 *] test.
> [1] [4 3 % _] test.
> [64] [4 3 ^] test.

> [4.5] [3.5 1 +] test.
> [2.5] [3.5 1 -] test.
> [7] [3.5 2 *] test.
> [2] [7.5 3 % _] test.
> [15.625] [2.5 3 ^] test.

> [[2 3.5 4]] [[1 2.5 3] 1 +] test.
> [[0 1.5 2]] [[1 2.5 3] 1 -] test.
> [[2 5 6]]   [[1 2.5 3] 2 *] test.
> [[0.5 2 3]] [[1 4 6] 2 %] test.

> [[2 4.5 6]] [[1 2.5 3] [1 2 3] +] test.
> [[0 0.5 0]] [[1 2.5 3] [1 2 3] -] test.
> [[1 5 9]] [[1 2.5 3] [1 2 3] *] test.
> [[1 2 2]] [[1 4 6] [1 2 3] %] test.

> [[-1]] [[2] 3 - ] test.
> [[2]] [[8] 4 % ] test.
> [[16]] [[4] 2 ^] test.

Indexing into lists

> [3] [2 [1 2 3] @] test.
> [1] [0 [1 2 3] @] test.
> [2] [1 [1 2 3] @] test.

Deep Index

> [[1 [9 10 11]]] [[[0 [2 [0 1 2]]]] [1 2 [9 10 11] 4] @] test.
> [1] [[0] [1 2 3 4 [5 6 7]] @] test.
> [[1 2]] [[[0 1]] [1 2 3 4 [5 6 7]] @] test.
> [[1 [5 6 7]]] [[[0 4]] [1 2 3 4 [5 6 7]] @] test.
> [[1 5]] [[[0 [4 0]]] [1 2 3 4 [5 6 7]] @] test.
> [[1 [5 7]]] [[[0 [4 [0 2]]]] [1 2 3 4 [5 6 7]] @] test.

Eliding indexes to get matrix slices

> [[ 4 400 4000 ] ] [
>   [[] 3]
>   [ [1 2 3 4]
>     [100 200 300 400]
>     [1000 2000 3000 4000]
>   ] @
> ] test.

Handling of circular lists

> [ "[ 1 (circular) 3 ]" ] [ [1 2 3] dup. 1  abc-abca ! to-string ] test.

Testing prototype object lookup

> [ 5 ] [ object;copy 5 foo add-data-slot foo lookup .] test.
> [ 5 ] [ 
>         object;copy 5  foo add-data-slot 
>         object;copy 10 bar add-data-slot
>                     12 foo add-data-slot 
>         parent* add-data-slot
>         foo lookup .
>       ] test.
> [ 10 ] [ 
>         object;copy 5  foo add-data-slot 
>         object;copy 10 bar add-data-slot
>                     12 foo add-data-slot 
>         parent* add-data-slot
>         bar lookup .
>       ] test.
> [ 12 ] [ 
>         object;copy 5  baz add-data-slot 
>         object;copy 10 bar add-data-slot
>                     12 foo add-data-slot 
>         parent* add-data-slot
>         foo lookup .
>       ] test.

> "Test run completed\n" write