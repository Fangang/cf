Lists are currently very inefficient. They are immutable and are
always copied. The following show's times to run for adding an item to
the head of a list for various sizes of list.

> [[ 1 swap. ,] repeat. [[] swap..drop.] time.] headtest set
> "Adding to the head of a list:" println
> "1000 = " write 1000 headtest.println
> "2000 = " write 2000 headtest.println
> "3000 = " write 3000 headtest.println
> "4000 = " write 4000 headtest.println
> "5000 = " write 5000 headtest.println

Tail is also bad:

> [[ 1 ,] repeat. [[] swap..drop.] time.] tailtest set
> "Adding to the tail of a list:" println
> "1000 = " write 1000 tailtest.println
> "2000 = " write 2000 tailtest.println
> "3000 = " write 3000 tailtest.println
> "4000 = " write 4000 tailtest.println
> "5000 = " write 5000 tailtest.println

Appending two lists:

> [[ [1] ,] repeat. [[] swap..drop.] time.] appendtest set
> "Appending two lists:" println
> "1000 = " write 1000 appendtest.println
> "2000 = " write 2000 appendtest.println
> "3000 = " write 3000 appendtest.println
> "4000 = " write 4000 appendtest.println
> "5000 = " write 5000 appendtest.println

Unconsing:

> "Uncons:" println
> [ dup. [ puncons ab-b do-unconstest. ] [ drop. ] if ] do-unconstest set
> [ enum [do-unconstest.] time. ] unconstest set
> "1000 = " write 1000 unconstest.println
> "2000 = " write 2000 unconstest.println
> "3000 = " write 3000 unconstest.println
> "4000 = " write 4000 unconstest.println
> "5000 = " write 5000 unconstest.println


