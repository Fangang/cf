Simple IRC Bot

The channel, server, port and nickname words are used to configure where
the bot lives. 'timelimit' is the maximum amount of time a eval request is
allowed to run before it is aborted.

> object copy bot-traits set
> object copy bot set
> bot;bot-traits;parent* add-slot. 
> "irc.freenode.net" server    add-slot
> "6667"             port      add-slot
> "cfevalbot"        nickname  add-slot
> "#doublec"         channel   add-slot
> 10000              timelimit set
> 200                textlimit set

When connected to the server we deal with the 'bot' object. As well as
the slots listed above it contains the following private slots:

  1. The line-channel used to read server responses
  2. The socket used to write requests

> nil bot-lines        add-slot
> nil bot-socket       add-slot

That's all of the bot instance slots. The methods are defined on the
traits object.

> drop.bot-traits;

Send a string to the server

> [line][line.bot-socket.socket-writeln] irc-write add-method

Connect to the server, returning the bot object

> [][ "NICK " nickname.,irc-write. ] set-nick add-method
> [][ "USER " nickname.," +iw ",nickname.," :",nickname.,irc-write. ] set-status add-method
> [][
>   server.port.socket 
>   dup.'line-channel`
>   self.bot-socket:;.
>        bot-lines:;.
>        set-nick;.
>   self.set-status;.
> ] bot-connect add-method

Methods to join channels, identify with nickserv and chat:

> [channel][ "JOIN " channel.,irc-write. ] join add-method
> [password][ "PRIVMSG nickserv :identify " password.,irc-write. ] identify add-method
> [channel message][ "PRIVMSG " channel. , " :" , message. , irc-write. ] say add-method

Return the list of responses received from the server. Blocks if no
responses have yet been received.

> [][ bot-lines.line-channel-getall ] bot-responses add-method

Utility words to evaluate cf code. These should probably be in the
prelude:

> [ tokenize parse [[]]` timelimit;make-limited-thread spawn thread-join to-string 2 sdrop dup. count 2 - stake ] eval set

The following words operate on responses from the server. 

> [ dup. 32 ? 1 + sdrop dup. 32 ? stake ] response-type set
> [ dup. 32 ? 1 + sdrop dup. 32 ? 1 + sdrop dup. 32 ? stake ] response-channel set
> [ dup. 32 ? 1 + sdrop dup. 32 ? 1 + sdrop dup. 32 ? 2 + sdrop ] response-text set

Is it a private message?

> [ response-type. "PRIVMSG" swap. = ] privmsg? set

Is it for the channel we are monitoring?

> [ [response-channel.]`= ] channel? set

Is it for us?

> [][ response-text. nickname. ",", swap. head?. ] for-bot? add-method

Map expression used to pick up the responses we are interested in. Anything
we aren't interested in results in a 0 which is later filtered out.

> [][ dup.privmsg?.[dup.channel.channel?.[dup.self.for-bot?;.[response-text.nickname.count 1 + sdrop][drop.0]if][drop.0]if][drop.0]if] wanted-messages add-method

Get all responses, filter for the messages we want

> [][bot-responses.[self.wanted-messages;.]map.[]filter.] messages-to-eval add-method

Build the expression to evaluate on another thread:

> [ dup.count textlimit; < [ ] [ textlimit; stake "...", ] if ] limit-string set
> [][
>   messages-to-eval.[
>     eval.limit-string.channel.swap.say.42
>   ] map.drop.
> ] handle-messages add-method

> [ dup.handle-messages;.bot-loop. ] bot-loop set

> [password][ bot-connect.password.identify.channel.join. ] start add-method
> [][ self.unit.[ bot-loop. ] make-thread spawn ] daemonize add-method

> drop.