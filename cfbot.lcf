\documentclass{article}
\usepackage{verbatim}
\usepackage{listings}
\lstnewenvironment{code} {
  \lstset{
    basicstyle=\small\ttfamily,
    flexiblecolumns=false,
    frame=single,
    basewidth={0.5em,0.45em}
  }
}{
}
  
\setlength{\parindent}{0.0in}
\setlength{\parskip}{0.1in}

\begin{document}

\section{Simple IRC Bot}

The channel, server, port and nickname words are used to configure where
the bot lives. 'timelimit' is the maximum amount of time a eval request is
allowed to run before it is aborted.

\begin{code}
object copy bot-traits set
object copy bot set
bot;bot-traits;parent* add-slot. 
"irc.freenode.net" server    add-slot
"6667"             port      add-slot
"cfevalbot"        nickname  add-slot
"#doublec"         channel   add-slot
10000              timelimit set
200                textlimit set
\end{code}

When connected to the server we deal with the 'bot' object. As well as
the slots listed above it contains the following private slots:

\begin{enumerate}
\item The line-channel used to read server responses
\item The socket used to write requests
\end{enumerate}

\begin{code}
nil bot-lines        add-slot
nil bot-socket       add-slot
\end{code}

That's all of the bot instance slots. The methods are defined on the
traits object.

\begin{code}
drop.bot-traits;
\end{code}

Send a string to the server

\begin{code}
[line][line.bot-socket.socket-writeln] irc-write add-method
\end{code}

Connect to the server, returning the bot object

\begin{code}
[][ 
  "NICK " nickname.,irc-write. 
] set-nick add-method

[][
  "USER " nickname.," +iw ",nickname.," :",nickname.,irc-write. 
] set-status add-method

[][
  server.port.socket 
  dup.'line-channel`
  self.bot-socket:;.
       bot-lines:;.
       set-nick;.
  self.set-status;.
] bot-connect add-method
\end{code}

Methods to join channels, identify with nickserv and chat:

\begin{code}
[channel][ 
  "JOIN " channel.,irc-write. 
] join add-method

[password][ 
  "PRIVMSG nickserv :identify " password.,irc-write. 
] identify add-method

[channel message][ 
  "PRIVMSG " channel. , " :" , message. , irc-write. 
] say add-method
\end{code}

Return the list of responses received from the server. Blocks if no
responses have yet been received.

\begin{code}
[][ 
  bot-lines.line-channel-getall [parse-response.] map.
] bot-responses add-method
\end{code}

Utility words to evaluate cf code. These should probably be in the
prelude:

\begin{code}
[ 
  tokenize parse 'gc,[[]]` timelimit;
  make-limited-thread spawn thread-join 
  to-string 2 sdrop dup. count 2 - stake 
] eval set
\end{code}

Use regular expressions to parse the incoming IRC message
into an object with appropriate slots.

\begin{code}
object copy 
  [][ type. "PRIVMSG" = ] privmsg? add-method
irc-message-trait set
  
[
  ":([^!]+)!(\S+)\s+(\S+)\s+:?(\S+)\s*(?:[:+-]+(.*))?" swap. match
  object copy 
  irc-message-trait; parent* add-ro-slot
  1 pick. @ from add-ro-slot
  2 pick. @ address add-ro-slot
  3 pick. @ type add-ro-slot
  4 pick. @ to add-ro-slot
  5 pick. @ message add-ro-slot
  nip.
] parse-response set
\end{code}

Is it for us?

\begin{code}
[r][ 
  nickname.r.message;.head?. 
] for-bot? add-method
\end{code}

Map expression used to pick up the responses we are interested in. Anything
we aren't interested in results in a 0 which is later filtered out.

\begin{code}
[r][ 
  r.privmsg?;.[
    r.to;.channel. = [
      r.for-bot?.[
        r.message;.nickname.count 1 + sdrop
      ][
        0
      ]if
    ][
      0
    ]if
  ][
    0
  ]if
] wanted-messages add-method
\end{code}

Get all responses, filter for the messages we want

\begin{code}
[][
  bot-responses.[
    wanted-messages.
  ]map.[]filter.
] messages-to-eval add-method
\end{code}

Build the expression to evaluate on another thread:

\begin{code}
[ 
  dup.count textlimit; < [ 
  ] [ 
    textlimit; stake "...", 
  ] if 
] limit-string set
[][
  messages-to-eval.[
    eval.limit-string.channel.swap.say.42
  ] map.drop.
] handle-messages add-method

[][ 
  handle-messages.bot-loop. 
] bot-loop add-method

[password][ 
  bot-connect.password.identify.channel.join. 
] start add-method

[][ 
  self.unit.[ bot-loop;. ] make-thread spawn 
] daemonize add-method

drop.
\end{code}
\end{document}
