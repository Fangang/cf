Simple IRC Bot

> [ "#concatenative" ] channel set

> [ ab-aba socket-writeln ] irc-write set
> [ "NICK cfbot" irc-write. ] nick set
> [ "USER cfbot +iw cfbot :$0" irc-write. ] status set
> [ "JOIN " channel., irc-write. ] join set
> [ [[c m] "PRIVMSG " c , " :" , m , ] ( irc-write. ] say set 
> [ "irc.freenode.net" "6667" socket a-aa line-channel ab-ba nick. status. ] cfbot set
> [ ab-aba line-channel-get println ] cfline set
> [ ab-aba line-channel-getall ] cflines set
> [ cflines. [println] each. ] pcflines set
> [ 
>   [[c]stack.[[]unstack.c.stack.[[]unstack.]`]`swap.unit.,unstack.] (
> ] infra set

> [ tokenize parse infra. to-string ] eval set

> [ dup. 32 ? sdrop " PRIVMSG" swap. head?. ] privmsg? set
> [ dup. 32 ? 1 + sdrop dup. 32 ? 1 + sdrop dup. 32 ? stake ] msg-channel set
> [ dup. 32 ? 1 + sdrop dup. 32 ? 1 + sdrop dup. 32 ? 2 + sdrop ] msg-text set
> [ swap.msg-channel.= ] channel? set
> [ msg-text. "cfbot," swap. head?. ] for-bot? set

> [ dup. privmsg?. [ dup. channel. channel?. [ dup. for-bot?. [ msg-text. "cfbot," count sdrop ] [ drop. 0 ] if ] [ drop. 0 ] if ] [ drop. 0 ] if ] maybe-eval set

> [ [maybe-eval.]map.[] filter.[eval.]map.] to-eval set
> [ [ [s c m] m [ "PRIVMSG " c , " :" , swap. , s socket-writeln ] each. s ] ( ] say-all set

> [ cflines. to-eval. channel. swap. say-all. ] eval-messages  set
> [ eval-messages. eval-loop. ] eval-loop set

> [ cflines. [maybe-eval.]map.[]filter.[[a b c] c [[[a b channel.]]`unit.,eval,'.,say,'.,[ab-],]map. [a b]`] ( ] to-eval2 set

> [ to-eval2. [ [] swap. make-thread spawn ] map. drop. ] eval-messages2 set
> [ eval-messages2. eval-loop2. ] eval-loop2 set
